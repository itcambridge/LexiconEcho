import { BaseAgentResponse, CEOResponse, CMOResponse } from '../prompts/agentPrompts';
import { AgentType } from '../types/Agent';

export interface IntegratedResponse {
  // High-level summary
  summaries: Partial<Record<AgentType, string>>;
  overallConfidence: number;
  
  // Key insights
  keyTakeaways: string[];
  consolidatedRisks: string[];
  
  // Strategic elements
  vision: string;
  strategicDirection: string[];
  
  // Action planning
  masterActionPlan: {
    immediate: string[];
    shortTerm: string[];
    longTerm: string[];
  };
  
  // Marketing specific
  marketingStrategy?: {
    opportunities: string[];
    metrics: {
      kpis: string[];
      targets: string[];
      timeline: string;
    };
  };
  
  // Metadata
  contributingAgents: AgentType[];
  timestamp: Date;
}

export class ResponseIntegrator {
  private static calculateConfidence(responses: BaseAgentResponse[]): number {
    const sum = responses.reduce((acc, response) => acc + response.confidence, 0);
    return sum / responses.length;
  }

  static integrate(
    ceoResponse: CEOResponse,
    cmoResponse?: CMOResponse
  ): IntegratedResponse {
    const responses: BaseAgentResponse[] = [ceoResponse];
    if (cmoResponse) responses.push(cmoResponse);

    const integrated: IntegratedResponse = {
      // Basic summaries
      summaries: {
        [AgentType.Strategy]: ceoResponse.summary,
        ...(cmoResponse && { [AgentType.Marketing]: cmoResponse.summary })
      },
      overallConfidence: this.calculateConfidence(responses),

      // Combine insights
      keyTakeaways: [
        ...ceoResponse.keyTakeaways,
        ...(cmoResponse?.keyTakeaways || [])
      ],
      
      consolidatedRisks: [
        ...ceoResponse.risks,
        ...(cmoResponse?.risks || [])
      ],

      // Strategic elements
      vision: ceoResponse.vision,
      strategicDirection: ceoResponse.strategicDirection,

      // Action planning
      masterActionPlan: {
        immediate: [
          ...ceoResponse.actionPlan.immediate,
          ...(cmoResponse?.recommendations || []).filter(r => r.toLowerCase().includes('immediate'))
        ],
        shortTerm: [
          ...ceoResponse.actionPlan.shortTerm,
          ...(cmoResponse?.recommendations || []).filter(r => r.toLowerCase().includes('short term'))
        ],
        longTerm: [
          ...ceoResponse.actionPlan.longTerm,
          ...(cmoResponse?.recommendations || []).filter(r => r.toLowerCase().includes('long term'))
        ]
      },

      // Marketing specific elements (if CMO responded)
      ...(cmoResponse && {
        marketingStrategy: {
          opportunities: cmoResponse.marketOpportunities,
          metrics: cmoResponse.metrics
        }
      }),

      // Metadata
      contributingAgents: responses.map(r => r.agentType),
      timestamp: new Date()
    };

    return integrated;
  }

  static formatIntegratedResponse(response: IntegratedResponse): string {
    return `
Executive Summary
----------------
${Object.entries(response.summaries)
  .map(([agent, summary]) => `${agent}: ${summary}`)
  .join('\n')}

Overall Confidence: ${(response.overallConfidence * 100).toFixed(1)}%

Key Takeaways
------------
${response.keyTakeaways.map(point => `• ${point}`).join('\n')}

Strategic Direction
-----------------
Vision: ${response.vision}
${response.strategicDirection.map(point => `• ${point}`).join('\n')}

Action Plan
----------
Immediate (30 days):
${response.masterActionPlan.immediate.map(action => `• ${action}`).join('\n')}

Short Term (90 days):
${response.masterActionPlan.shortTerm.map(action => `• ${action}`).join('\n')}

Long Term (1 year):
${response.masterActionPlan.longTerm.map(action => `• ${action}`).join('\n')}

Risks & Challenges
----------------
${response.consolidatedRisks.map(risk => `• ${risk}`).join('\n')}

${response.marketingStrategy ? `
Marketing Strategy
----------------
Opportunities:
${response.marketingStrategy.opportunities.map(opp => `• ${opp}`).join('\n')}

Key Metrics:
${response.marketingStrategy.metrics.kpis.map(kpi => `• ${kpi}`).join('\n')}
` : ''}

Generated by: ${response.contributingAgents.join(', ')}
Timestamp: ${response.timestamp.toISOString()}
`;
  }
} 